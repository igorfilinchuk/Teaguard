import requests
import re
import subprocess

# Tea Protocol API
TEA_PROTOCOL_API = "https://api.tea.xyz/v1/report"

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
VULNERABILITIES = {
    "eval(": "RCE ‚Äì –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞",
    "pickle.load": "–ß—Ç–µ–Ω–∏–µ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è)",
    "exec(": "–û–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥",
    "subprocess.Popen": "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
}

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Bandit (–∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ Python –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
def run_bandit(file_path):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Bandit –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞."""
    result = subprocess.run(["bandit", "-r", file_path], capture_output=True, text=True)
    return result.stdout if result.returncode == 0 else "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Bandit."

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Semgrep (–∞–Ω–∞–ª–∏–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –ø–æ —à–∞–±–ª–æ–Ω–∞–º)
def run_semgrep(file_path):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Semgrep –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π."""
    result = subprocess.run(["semgrep", "--config=auto", file_path], capture_output=True, text=True)
    return result.stdout if result.returncode == 0 else "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Semgrep."

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ SBOM
def generate_sbom():
    """–°–æ–∑–¥–∞—ë—Ç SBOM-—Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
    result = subprocess.run(["cyclonedx-py", "--output", "sbom.json"], capture_output=True, text=True)
    return result.stdout if result.returncode == 0 else "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SBOM."

# –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ CVE
def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö CVE."""
    result = subprocess.run(["pip-audit"], capture_output=True, text=True)
    return result.stdout if result.returncode == 0 else "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É–¥–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
def analyze_code(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏."""
    with open(file_path, "r", encoding="utf-8") as file:
        code = file.read()
    
    issues = []
    for pattern, description in VULNERABILITIES.items():
        if re.search(pattern, code):
            issues.append({"pattern": pattern, "description": description})
    
    return issues

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ Tea Protocol
def report_to_tea_protocol(project_name, issues):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á—ë—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π."""
    payload = {"project": project_name, "issues": issues}
    response = requests.post(TEA_PROTOCOL_API, json=payload)
    return response.json()

# üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
if __name__ == "__main__":
    file_to_scan = "example.py"

    print("\nüìë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SBOM:")
    print(generate_sbom())

    print("\nüîç –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
    print(check_dependencies())

    print("\nüîé –ó–∞–ø—É—Å–∫ Bandit:")
    print(run_bandit(file_to_scan))

    print("\nüîé –ó–∞–ø—É—Å–∫ Semgrep:")
    print(run_semgrep(file_to_scan))

    vulnerabilities_found = analyze_code(file_to_scan)
    if vulnerabilities_found:
        print("\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏:", vulnerabilities_found)
        response = report_to_tea_protocol("MyOSSProject", vulnerabilities_found)
        print("\nüì° Tea Protocol –æ—Ç–≤–µ—Ç:", response)
    else:
        print("\n‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.")
